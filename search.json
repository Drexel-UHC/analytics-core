[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "docs/blog/issues/7 - Abortion and Paid Family Leave figure/quarto.html",
    "href": "docs/blog/issues/7 - Abortion and Paid Family Leave figure/quarto.html",
    "title": "Visualization faceted by state",
    "section": "",
    "text": "URL: https://github.com/Drexel-UHC/analytics-core/issues/7\n\nI’m hoping to make a figure that shows different policy statuses of states (abortion ban, proposed abortion ban, no abortion ban; Paid family leave, no paid family leave; paid family leave preemption, no preemption), with the states in the location of the US map…\nI think geofacet mightttt get us close to the figure I’m hoping to make, but not quitee there."
  },
  {
    "objectID": "docs/blog/issues/7 - Abortion and Paid Family Leave figure/quarto.html#plot",
    "href": "docs/blog/issues/7 - Abortion and Paid Family Leave figure/quarto.html#plot",
    "title": "Visualization faceted by state",
    "section": "Plot",
    "text": "Plot\n\n\nCode\n## Set coordinates\nheight = 10 \npadding_x = 1\nwidth = 8\nrect_xmin = padding_x\nrect_xmax = width + padding_x\nrect_x_mean = mean(c(rect_xmin,rect_xmax))\nrect_ymin = height/3\nrect_ymax = rect_ymin*2\n\n## Manual colors for data features\nabortion_colors = c(\"0\" = \"#e7e8e9\",\n                    \"1\" = \"#c1c2c4\", \n                    \"2\" = \"#8a8c8f\",\n                    \"3\" = \"#5f6062\",\n                    \"4\" = \"#000000\")\nxwalk_colors = c(abortion_colors,\n                 \"white\" = \"white\",\n                 \"black\" = \"black\",\n                 \"0_family_leave\" = \"white\",\n                 \"1_family_leave\" = \"#00aeef\",\n                 \"0_preemption\" = \"white\",\n                 \"1_preemption\" = \"#f1592a\")     \n\n## Operationalize data for plot\ndata_processed = data %>% \n  ## Append coordinates to data for geom_polygon\n  mutate(top_triangle_x = list(c(rect_xmin,rect_xmax,rect_x_mean)),\n         top_triangle_y = list(c(rect_ymax,rect_ymax,height)),\n         bottom_triangle_x = list(c(rect_xmin,rect_xmax,rect_x_mean)),\n         bottom_triangle_y = list(c(rect_ymin,rect_ymin,0))\n  ) %>% \n  unnest(cols = c(top_triangle_x, top_triangle_y, bottom_triangle_x, bottom_triangle_y)) %>% \n  ## operationalize colors\n  mutate(\n    state_text = ifelse(as.numeric(abortion_ban_risk)>2, \"white\",\"black\"),\n    family_leave = paste0(family_leave,\"_family_leave\"),\n    preemption = paste0(preemption,\"_preemption\"))\n\n\n## create a function to make basic shapes\ngeom_hex_for_alina = function(gg){\n  gg +\n    ## add rectangle\n    geom_rect(aes(xmin = rect_xmin, xmax = rect_xmax,   \n                  ymin = rect_ymin, ymax = rect_ymax, \n                  fill = abortion_ban_risk)) +\n    ## Add state abbrv text\n    geom_text(aes(label = state, color = state_text),\n              x = height/2, y = height/2,\n              size = 3)+\n    ## Top triangle (family leave)\n    geom_polygon(aes(x=top_triangle_x,y=top_triangle_y, fill = family_leave)) + \n    ## Bottom triangle (preemption)\n    geom_polygon(aes(x = bottom_triangle_x, y = bottom_triangle_y, fill = preemption)) +   \n    ## Manual colors\n    scale_fill_manual(values = xwalk_colors) +\n    scale_color_manual(name = \"state_text\", values = xwalk_colors) +\n    theme_void()+ \n    theme(\n      ## Completely remove facet labels\n      strip.background = element_blank(),\n      strip.text.x = element_blank(),\n      ## Remove legend\n      legend.position = 'none'\n    )\n}\n\n## Test facet\nplot = data_processed %>% \n  ggplot()  %>% \n  geom_hex_for_alina() +\n  facet_geo(~ state, grid = \"us_state_grid2\") +\n  theme(plot.margin = margin(1, 1, 1, 1, \"cm\"))\nplot"
  },
  {
    "objectID": "docs/blog/issues/7 - Abortion and Paid Family Leave figure/quarto.html#legend-1-rectangle",
    "href": "docs/blog/issues/7 - Abortion and Paid Family Leave figure/quarto.html#legend-1-rectangle",
    "title": "Visualization faceted by state",
    "section": "Legend 1: Rectangle",
    "text": "Legend 1: Rectangle\n\n\nCode\nside = 10 \npadding = 1.5\nrect_width =  (side - 2*padding)/5\nlegend_y = 6\nlegend_height = 1.5\ndfa = tibble(xmin = padding + 0:4*rect_width,\n             xmax = padding + 1:5*rect_width,\n             ymin = legend_y,\n             ymax = legend_y + legend_height,\n             fill = unname(abortion_colors))\nlegend_risk = ggplot() + \n  ## Container (10 by 10)\n  geom_rect(aes(xmin = 0, xmax = 10, \n                ymin = 0, ymax = 10),\n            fill = \"white\") + \n  ## Legend for rectangles\n  geom_rect(dfa, mapping = \n              aes(xmin = xmin, xmax = xmax, \n                  ymin = ymin, ymax = ymax),\n            fill = dfa$fill) + \n  ## Left label\n  geom_text(aes(label = \"Less risk\"),\n            x = side/5, y = legend_y - 1,\n            size = 3) +\n  ## Rigth label\n  geom_text(aes(label = \"More risk\"),\n            x = 4*side/5, y = legend_y -1,\n            size = 3) +\n  theme_void()\n\ntitle_rect <- ggdraw() + \n  draw_label(\n    \"Rectangle show \\n abortion ban risk\",\n    fontface = 'bold',\n    x = 0.5,\n    hjust = 0.5,\n    size = 10\n  ) +\n  theme(\n    # add margin on the left of the drawing canvas,\n    # so title is aligned with left edge of first plot\n    plot.margin = margin(5, 0, 0, 0)\n  )\nrect_legend = plot_grid(\n  title_rect, legend_risk,\n  ncol = 1,\n  rel_heights = c(2, 8)\n)\n\nrect_legend"
  },
  {
    "objectID": "docs/blog/issues/7 - Abortion and Paid Family Leave figure/quarto.html#legend-2-paid-family-leave",
    "href": "docs/blog/issues/7 - Abortion and Paid Family Leave figure/quarto.html#legend-2-paid-family-leave",
    "title": "Visualization faceted by state",
    "section": "Legend 2: Paid family leave",
    "text": "Legend 2: Paid family leave\n\n\nCode\n## Create funciton to layout for legend\ngeom_hex_legend_for_alina = function(gg){\n  gg +\n    geom_rect(aes(xmin =  0 - 1*height, xmax = height + 1*height,   \n                  ymin = 0 - 1*height, ymax = height + 1*height),\n              fill = \"white\") \n}\n\n## Legend 2: Blue triangle\ntitle_hex_blue <- ggdraw() + \n  draw_label(\n    \"Blue Triangles show \\n paid family policy\",\n    fontface = 'bold',\n    x = 0.5,\n    hjust = 0.5,\n    size = 10\n  ) +\n  theme( plot.margin = margin(5, 0, 0, 0))\nlegend_hex_blue = data_processed %>% \n  filter(state == \"WA\") %>% \n  mutate(state = \"\") %>% \n  ggplot()  %>% \n  geom_hex_legend_for_alina() %>% \n  geom_hex_for_alina()\nhex_legend_blue = plot_grid(\n  title_hex_blue, legend_hex_blue,\n  ncol = 1,\n  rel_heights = c(2, 8)\n)\n\nhex_legend_blue"
  },
  {
    "objectID": "docs/blog/issues/7 - Abortion and Paid Family Leave figure/quarto.html#legend-3-preemption",
    "href": "docs/blog/issues/7 - Abortion and Paid Family Leave figure/quarto.html#legend-3-preemption",
    "title": "Visualization faceted by state",
    "section": "Legend 3: Preemption",
    "text": "Legend 3: Preemption\n\n\nCode\n## Legend 3: Red triangle\ntitle_hex_red <- ggdraw() + \n  draw_label(\n    \"Blue Triangles show \\n preemption policy\",\n    fontface = 'bold',\n    x = 0.5,\n    hjust = 0.5,\n    size = 10\n  ) +\n  theme(\n    plot.margin = margin(5, 0, 0, 0)\n  )\nlegend_hex_red = data_processed %>% \n  filter(state == \"MI\") %>% \n  mutate(state = \"\") %>% \n  ggplot()  %>% \n  geom_hex_legend_for_alina() %>% \n  geom_hex_for_alina()\nhex_legend_red = plot_grid(\n  title_hex_red, legend_hex_red,\n  ncol = 1,\n  rel_heights = c(2, 8)\n)\nhex_legend_red"
  },
  {
    "objectID": "docs/faq/index.html",
    "href": "docs/faq/index.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "What can I use Quarto for?\nQuarto® is an open-source scientific and technical publishing system built on Pandoc. You can weave together narrative text and code to produce elegantly formatted output as documents, web pages, blog posts, books and more. \n\n\n\nHow do I install Quarto?\nVisit the Quarto.org Get Started page, which provides installation instructions for Windows, Mac OS, and Linux. \n\n\n\nIs Quarto free to use?\nYes! Quarto is open source with a GPL-2 license. You can use or disseminate it any way that you would any GPL-2 licensed open source software. \n\n\nWhat output formats can Quarto create?\nThere are many output formats available in Quarto. This includes all of the built in Pandoc formats (e.g. HTML, PDF, MS Word, Revealjs, ePub, etc.) as well as various ways to publish multiple documents (websites, blogs, and books). Learn more at Quarto Formats. \n\n\nWhat editing tools can I use with Quarto?\nYou can use a wide variety of tools with Quarto. We have provided documentation for writing and editing Quarto documents in VSCode, JupyterLab, RStudio IDE, or any text editor. Visit the Get Started with Quarto page to install, and then choose your tool for a brief introductory guide.\n\n\nCan I use Jupyter notebooks with Quarto?\nYes! Quarto can render Jupyter notebooks and you can use Jupyter, JupyterLab or any other .ipynb notebook editor with Quarto. You can render existing .ipynb notebooks as-is with Quarto, but adding Quarto-specific output options or a YAML header can enhance the output. Visit theJupyterLab page for more information.\n\n\nWhat programming languages are supported in Quarto?\nThe principal languages supported by Quarto are Python, R, Julia, and Observable JavaScript. Integration with Jupyter also enables the use of many other languages. \nEach Quarto document can be optionally processed by a computational engine (the engine can be manually specified or automatically detected based on the code chunks within). Current engines include Knitr (which is also used by R Markdown and supports a variety of languages including R, Python, and Julia, etc.) and Jupyter (which supports many languages including Python, Julia, and R). See the documentation on Engine Binding for additional details.\n\n\nWhat human languages are supported in Quarto?\nYou can write your Quarto documentation in your human language of choice. The lang document option is used to identify the main language of the document using IETF language tags (following the BCP 47 standard), such as en or en-GB. \n\n\nHow can I share documents and have people comment on them?\nYou can publish Quarto content to various locations. See the user guides for publishing for details on using Quarto Pub, GitHub Pages, Netlify, RStudio Connect, and other services with Quarto. Once documents are published you can use  hypothes.is, Utterances, or Giscus for commenting. Learn more in the documentation on commenting.\n\n\nCan I do collaborative editing with Quarto?\nThere is not yet anything specific for collaborative editing in Quarto. You can collaborate on .qmd files in the same way you currently do for any text or code files. \nRStudio Workbench allows for Project Sharing for interactive editing and collaboration on the same document.\n\n\nWhere can I publish Quarto websites?\nThere are a wide variety of ways to publish Quarto websites. Website content is by default written to the \\_site sub-directory (you can customize this using the output-dir option). Publishing is simply a matter of copying the output directory to a web server or web hosting service.\nThe publishing documentation describes several convenient options for Quarto website deployment including RStudio Connect, Netlify, GitHub Pages, Firebase, Site44, and Amazon S3. We’ll mostly defer to the documentation provided by those various services, but will note any Quarto website specific configuration required.\n\n\nDoes RStudio Connect support Quarto?\nYes! You can publish Quarto content to RStudio Connect v2021.08.0 or later. Quarto has to be enabled as documented in the RStudio Connect admin guide. Connect’s user documentation refers to Quarto.org docs on how to publish from the RStudio IDE. To publish Python-based Quarto content, you can use the rsconnect-python CLI from various locations, including VSCode, JupyterLab or the terminal.\n\n\nWho are the developers of Quarto?\nDevelopment of Quarto is sponsored by RStudio, PBC. The same core team works on both Quarto and R Markdown:\n\nCarlos Scheidegger (@cscheid)\nCharles Teague (@dragonstyle)\nChristophe Dervieux (@cderv)\nJ.J. Allaire (@jjallaire)\nYihui Xie (@yihui)\n\nHere is the full contributors list. Quarto is open source and we welcome contributions in our github repository as well! https://github.com/quarto-dev/quarto-cli.\n\n\nWhy the name Quarto?\nWe wanted to use a name that had meaning in the history of publishing and landed on Quarto, which is the format of a book or pamphlet produced from full sheets printed with eight pages of text, four to a side, then folded twice to produce four leaves. The earliest known European printed book is a Quarto, the Sibyllenbuch, believed to have been printed by Johannes Gutenberg in 1452–53.\n\n\nWhere can I report bugs or request features?\nThanks for finding something and sharing with us! You can file an issue in the Quarto repository https://github.com/quarto-dev/quarto-cli/issues.\n\n\nWhere can I ask questions and discuss using Quarto with others?\nThe best place to ask questions and see what questions other people have is in Quarto discussions (https://github.com/quarto-dev/quarto-cli/discussions)."
  },
  {
    "objectID": "docs/faq/rmarkdown.html",
    "href": "docs/faq/rmarkdown.html",
    "title": "FAQ for R Markdown Users",
    "section": "",
    "text": "Quarto sounds similar to R Markdown. What is the difference and why create a new project?\nAt its core, Quarto works the same way as R Markdown: \n\nThe goal of Quarto is to make the process of creating and collaborating on scientific and technical documents dramatically better. Quarto combines the functionality of R Markdown, bookdown, distill, xaringian, etc into a single consistent system with “batteries included” that reflects everything we’ve learned from R Markdown over the past 10 years.\nThe number of languages and runtimes used for scientific discourse is very broad (and the Jupyter ecosystem in particular is extraordinarily popular). Quarto is at its core multi-language and multi-engine (supporting Knitr, Jupyter, and Observable today and potentially other engines tomorrow).\nOn the other hand, R Markdown is fundamentally tied to R which severely limits the number of practitioners it can benefit. Quarto is RStudio’s attempt to bring R Markdown to everyone! Unlike R Markdown, Quarto doesn’t have a dependency or requirement for R. Quarto was developed to be multilingual, beginning with R, Python, Javascript, and Julia, with the idea that it will work even for languages that don’t yet exist.\nWhile it is a “new” system, it should also be noted that it is highly compatible with existing content: you can render most R Markdown documents and Jupyter notebooks unmodified with Quarto. The concept is to make a major, long term investment in reproducible research, while keeping it compatible with existing formats and adaptable to the various environments users work in.\n\n\nIs R Markdown going away? Will my R Markdown documents continue to work?\nR Markdown is not going away! R Markdown is used extensively and continues to work well. It will continue to be actively supported. We’re not leaving R Markdown, we’re expanding our scope. Over the years there have been many feature requests, and rather than implementing them all in R Markdown, for certain features we may refer you to Quarto. Everything that is currently in R Markdown will continue to work and be supported. There are no plans for deprecation.\nRead more about this in Yihui Xie’s blog post With Quarto Coming, is R Markdown Going Away? No.\n\n\nShould I switch from R Markdown to Quarto?\nIf you like using R Markdown, there’s no need to switch! R Markdown will continue to be supported and work as it always has been. You’re welcome to try Quarto if you like, but there’s no need to switch. Some new features may only exist in Quarto, so if you want to use those, then that’s where you would give those a try.  \nWe should emphasize that switching is not imperative. While we don’t plan on major feature initiatives in R Markdown and related packages, we are going to continue to maintain them (smaller improvements and bug fixes) for a long time to come. Furthermore, since Rmd files can in most cases be rendered without modification by Quarto, you can continue using R Markdown and the switching cost will still be minimal whenever you decide to do it. \n\n\nI use X (bookdown, blogdown, etc.). What is the Quarto equivalent?\nHere are the Quarto equivalents for various packages and features of the R Markdown ecosystem (in some cases Quarto equivalents are not yet available but will be later this year):\n\n\n\n\nFeature\nR Markdown\nQuarto\n\n\n\n\nBasic Formats\n\nhtml_document\npdf_document\nword_document\n\n\nhtml\npdf\ndocx\n\n\n\nBeamer\n\nbeamer_presentation\n\n\nbeamer\n\n\n\nPowerPoint\n\npowerpoint_presentation\n\n\npptx\n\n\n\nHTML Slides\n\nxaringan\nioslides\nrevealjs\n\n\nrevealjs\n\n\n\nAdvanced Layout\n\ntufte\ndistill\n\n\nQuarto Article Layout\n\n\n\nCross References\n\nhtml_document2\npdf_document2\nword_document2\n\n\nQuarto Crossrefs\n\n\n\nWebsites & Blogs\n\nblogdown\ndistill\n\n\nQuarto Websites\nQuarto Blogs\n\n\n\nBooks\n\nbookdown\n\n\nQuarto Books\n\n\n\nInteractivity\nShiny Documents\nQuarto Interactive Documents\n\n\nPaged HTML\npagedown\nSummer 2022\n\n\nJournal Articles\nrticles\nSummer 2022\n\n\nDashboards\nflexdashboard\nFall 2022\n\n\nInteractive Tutorials\nlearnr\nNo equivalent planned\n\n\n\n\n\n\nCan you create custom formats for Quarto like you can for R Markdown?\nNot currently, but we expect that this capability will be available in version 1.0 of Quarto (which will be available before rstudio::conf in July).\n\n\nWhen would be a good time to start new projects in Quarto rather than R Markdown?\nOur current plan is to announce Quarto v1.0 at rstudio::conf (end of July). This will be a stable release that will be an excellent foundation for starting new projects with Quarto or migrating existing R Markdown projects (if you are so inclined).\n\n\nDoes the RStudio IDE support Quarto?\nYes! You need to use the latest release of RStudio (v2022.07), which includes support for editing and preview of Quarto documents.\nYou can download RStudio v2022.07 from https://rstudio.com/products/rstudio/download/.\n\n\nDoes RStudio Connect support Quarto?\nYes! You can publish Quarto content to RStudio Connect v2021.08.0 or later. Quarto has to be enabled as documented in the RStudio Connect admin guide. Connect’s user documentation refers to Quarto.org docs on how to publish from the RStudio IDE. To publish Python-based Quarto content, you can use the rsconnect-python CLI from various locations, including VSCode, JupyterLab or the terminal."
  },
  {
    "objectID": "docs/gallery/index.html",
    "href": "docs/gallery/index.html",
    "title": "Gallery",
    "section": "",
    "text": "Note\n\n\n\nCOMING SOON"
  },
  {
    "objectID": "docs/get-started/index.html",
    "href": "docs/get-started/index.html",
    "title": "Get Started",
    "section": "",
    "text": "Note\n\n\n\nCOMING SOON"
  }
]